/*
 * generated by Xtext
 */
package org.xtext.example.mydsl2.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl2.services.Petrinet2GrammarAccess;
import petrinet2.Arc;
import petrinet2.Petrinet;
import petrinet2.Petrinet2Package;
import petrinet2.Place;
import petrinet2.Transition;

@SuppressWarnings("all")
public abstract class AbstractPetrinet2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Petrinet2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Petrinet2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Petrinet2Package.ARC:
				if (rule == grammarAccess.getInputArcRule()) {
					sequence_InputArc(context, (Arc) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getElementRule()) {
					sequence_InputArc_OutputArc(context, (Arc) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOutputArcRule()) {
					sequence_OutputArc(context, (Arc) semanticObject); 
					return; 
				}
				else break;
			case Petrinet2Package.PETRINET:
				sequence_Petrinet(context, (Petrinet) semanticObject); 
				return; 
			case Petrinet2Package.PLACE:
				sequence_Place(context, (Place) semanticObject); 
				return; 
			case Petrinet2Package.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InputArc returns Arc
	 *
	 * Constraint:
	 *     (name=STRING To=[Node|STRING] From=[Node|STRING])
	 */
	protected void sequence_InputArc(ISerializationContext context, Arc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ARC__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ARC__TO));
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ARC__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ARC__FROM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputArcAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInputArcAccess().getToNodeSTRINGTerminalRuleCall_7_0_1(), semanticObject.eGet(Petrinet2Package.Literals.ARC__TO, false));
		feeder.accept(grammarAccess.getInputArcAccess().getFromNodeSTRINGTerminalRuleCall_10_0_1(), semanticObject.eGet(Petrinet2Package.Literals.ARC__FROM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Arc
	 *
	 * Constraint:
	 *     ((name=STRING To=[Node|STRING] From=[Node|STRING]) | (name=STRING To=[Node|STRING] From=[Node|STRING]))
	 */
	protected void sequence_InputArc_OutputArc(ISerializationContext context, Arc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OutputArc returns Arc
	 *
	 * Constraint:
	 *     (name=STRING To=[Node|STRING] From=[Node|STRING])
	 */
	protected void sequence_OutputArc(ISerializationContext context, Arc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ARC__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ARC__TO));
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ARC__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ARC__FROM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutputArcAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOutputArcAccess().getToNodeSTRINGTerminalRuleCall_7_0_1(), semanticObject.eGet(Petrinet2Package.Literals.ARC__TO, false));
		feeder.accept(grammarAccess.getOutputArcAccess().getFromNodeSTRINGTerminalRuleCall_10_0_1(), semanticObject.eGet(Petrinet2Package.Literals.ARC__FROM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Petrinet returns Petrinet
	 *
	 * Constraint:
	 *     elements+=Element*
	 */
	protected void sequence_Petrinet(ISerializationContext context, Petrinet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Place
	 *     Node returns Place
	 *     Place returns Place
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Place(ISerializationContext context, Place semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlaceAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Transition
	 *     Node returns Transition
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Petrinet2Package.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
